return {
  -- {
  --   'iguanacucumber/magazine.nvim',
  --   name = 'nvim-cmp',
  --   event = 'InsertEnter',
  --   dependencies = {
  --     {
  --       -- snippet plugin
  --       'L3MON4D3/LuaSnip',
  --       dependencies = 'rafamadriz/friendly-snippets',
  --       opts = { history = true, updateevents = 'TextChanged,TextChangedI' },
  --       config = function(_, opts)
  --         require('luasnip').config.set_config(opts)
  --         -- vscode format
  --         require('luasnip.loaders.from_vscode').lazy_load { exclude = vim.g.vscode_snippets_exclude or {} }
  --         require('luasnip.loaders.from_vscode').lazy_load { paths = vim.g.vscode_snippets_path or '' }
  --         require('luasnip.loaders.from_vscode').lazy_load { paths = { vim.fn.stdpath 'config' .. '/snippets' } }
  --
  --         -- snipmate format
  --         require('luasnip.loaders.from_snipmate').load()
  --         require('luasnip.loaders.from_snipmate').lazy_load { paths = vim.g.snipmate_snippets_path or '' }
  --
  --         -- lua format
  --         require('luasnip.loaders.from_lua').load()
  --         require('luasnip.loaders.from_lua').lazy_load { paths = vim.g.lua_snippets_path or '' }
  --
  --         vim.api.nvim_create_autocmd('InsertLeave', {
  --           callback = function()
  --             if require('luasnip').session.current_nodes[vim.api.nvim_get_current_buf()] and not require('luasnip').session.jump_active then
  --               require('luasnip').unlink_current()
  --             end
  --           end,
  --         })
  --       end,
  --     },
  --     {
  --       'windwp/nvim-autopairs',
  --       opts = {
  --         fast_wrap = {},
  --         disable_filetype = { 'TelescopePrompt', 'vim' },
  --       },
  --       config = function(_, opts)
  --         require('nvim-autopairs').setup(opts)
  --
  --         -- setup cmp for autopairs
  --         local cmp_autopairs = require 'nvim-autopairs.completion.cmp'
  --         require('cmp').event:on('confirm_done', cmp_autopairs.on_confirm_done())
  --       end,
  --     },
  --     'rafamadriz/friendly-snippets',
  --     'saadparwaiz1/cmp_luasnip',
  --     { 'iguanacucumber/mag-nvim-lsp', name = 'cmp-nvim-lsp', opts = {} },
  --     { 'iguanacucumber/mag-nvim-lua', name = 'cmp-nvim-lua' },
  --     { 'iguanacucumber/mag-buffer', name = 'cmp-buffer' },
  --     'hrsh7th/cmp-path',
  --   },
  --   config = function()
  --     -- See `:help cmp`
  --     local cmp = require 'cmp'
  --     local luasnip = require 'luasnip'
  --     luasnip.config.setup {}
  --
  --     cmp.setup {
  --       performance = {
  --         debounce = 0, -- default is 60ms
  --         throttle = 0, -- default is 30ms
  --       },
  --       snippet = {
  --         expand = function(args)
  --           luasnip.lsp_expand(args.body)
  --         end,
  --       },
  --       completion = { completeopt = 'menu,menuone,noinsert' },
  --       mapping = cmp.mapping.preset.insert {
  --         -- Select the [n]ext item
  --         ['<C-n>'] = cmp.mapping.select_next_item(),
  --         -- Select the [p]revious item
  --         ['<C-p>'] = cmp.mapping.select_prev_item(),
  --
  --         -- Scroll the documentation window [b]ack / [f]orward
  --         ['<C-b>'] = cmp.mapping.scroll_docs(-4),
  --         ['<C-f>'] = cmp.mapping.scroll_docs(4),
  --
  --         -- Accept ([y]es) the completion.
  --         --  This will auto-import if your LSP supports it.
  --         --  This will expand snippets if the LSP sent a snippet.
  --         ['<C-y>'] = cmp.mapping.confirm { select = true },
  --       },
  --       sources = {
  --         { name = 'ecolog' },
  --         { name = 'nvim_lsp' },
  --         { name = 'luasnip' },
  --         { name = 'supermaven' },
  --         { name = 'path' },
  --         { name = 'buffer' },
  --         { name = 'nvim_lua' },
  --         { name = 'cmdline' },
  --       },
  --     }
  --     cmp.setup.filetype({ 'sql' }, {
  --       sources = {
  --         { name = 'vim-dadbod-completion' },
  --         { name = 'buffer' },
  --       },
  --     })
  --   end,
  -- },
}
-- vim: ts=2 sts=2 sw=2 et
